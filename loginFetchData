# 验证码登录
import time
import json
import requests
import time
import datetime
import ast
import math
import os
from openpyxl import load_workbook
from openpyxl.utils import get_column_letter, column_index_from_string
from openpyxl import Workbook
from openpyxl.styles import Color,Font,Alignment,PatternFill,Border,Side,Protection
from PIL import ImageEnhance
from selenium import webdriver

# ************************************说明***************************************
# 共享数据开放平台：自动登陆，输入验证码后，爬取相应的数据项
# *******************************************************************************

# 避免出现系统错误：[WinError 2] 系统找不到指定的文件
try:
    import Image
except ImportError:
    from PIL import Image
import pytesseract

# 设置用户名和密码
username = 'sjgl'
password = 'sjgl@123456'

# 定义查询的厅局列表
input_city= ['省文化和旅游厅']

# 每个查询限制页数
loop_limit = 2

# 定义厅局字典（html页面中获取）
city_list = json.loads('['
                       '{"deptName":"省农业农村厅","deptValue":"80"},{"deptName":"省财政厅","deptValue":"72"},{"deptName":"省档案馆","deptValue":"142"},{"deptName":"省外办","deptValue":"98"}'
                       ',{"deptName":"省法院","deptValue":"177"},{"deptName":"省文化和旅游厅","deptValue":"83"}'
                       ']')

# 计数
count = 0
# 记录异常数据项
error_list = []

#定义输出excel
out_cities = []
out_depts = []
out_data = []

# OCR程序路径
pytesseract.pytesseract.tesseract_cmd = r'C:/Program Files (x86)/Tesseract-OCR/tesseract.exe'

# 保存截图
screenImg = "D:/data/screenImgTmp/screenImg.png"

# 保存cookie
_JsessionId = ''
_RememberMe = ''

def mkdir(path):
    # 引入模块
    import os

    # 去除首位空格
    path = path.strip()
    # 去除尾部 \ 符号
    path = path.rstrip("\\")

    # 判断路径是否存在
    # 存在     True
    # 不存在   False
    isExists = os.path.exists(path)

    # 判断结果
    if not isExists:
        # 如果不存在则创建目录
        os.makedirs(path)
        print(path + ' 创建成功')
        return True
    else:
        # 如果目录存在则不创建，并提示目录已存在
        print(path + ' 目录已存在')
        return False

def getHeader(cookie):
    headers = {"Accept": "application/json, text/plain, */*", "Accept-Encoding": "gzip, deflate",
               "Accept-Language": "zh-CN,zh;q=0.9", "Connection": "keep-alive"
        , "Content-Length": "44"
        , "Content-Type": "application/x-www-form-urlencoded"
        , "Cookie": cookie
        , "Host": "59.202.42.4"
        , "Origin": "http://59.202.42.4"
        , "Referer": "http://59.202.42.4/citysystem2/backstage/information/resource/searchIndex?isNew=true"
        , "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36"
        # , "X-Requested-With": "XMLHttpRequest"
   }
    return headers


def getPostData(mobile, name, isPass, page, cityValue):
    post_data = {
        "rows": 10,
        "page": page,
        "value3": cityValue,
        "resType": "0",
        "stauts": "0"
    }
    return post_data

def postQuery(mobile, name, isPass, page, cityName):
    session = requests.session()
    url = "http://59.202.42.4/citysystem2/backstage/information/resource/listAjax?from=search"
    cookie = getCookie()
    headers = getHeader(cookie)
    post_data = getPostData(mobile, name, isPass, page, cityName)
    return session.post(url, data=post_data, headers=headers)

def getCookie():
    global  _JsessionId
    global  _RememberMe
    if(_JsessionId==''):
        # 打开浏览器
        url = "http://dw.zj.gov.cn/pgpLogin/index.jsp"
        browser = webdriver.Chrome()
        browser.implicitly_wait(10)
        browser.maximize_window()
        browser.get(url)

        # 获取用户元素
        departCodingElement = browser.find_element_by_class_name("departCoding")
        # departCodingElement = browser.find_element_by_class_name("departCoding")[0]
        userElement = browser.find_element_by_id("username")
        passElement = browser.find_element_by_id("pwd")
        codeElement = browser.find_element_by_id("verCode")
        lgButton = browser.find_element_by_class_name("btn")

        # 执行js去掉readonly属性
        jsString = "document.getElementsByClassName('departCoding')[0].removeAttribute('readonly')"
        browser.execute_script(jsString)

        # 设置元素的值
        js2 = "document.getElementsByClassName('departCoding')[0].value='001008003015001'"
        browser.execute_script(js2)

        # departCodingElement.send_keys("001008003015001")
        userElement.send_keys(username)
        passElement.send_keys(password)

        # 显示市府办，消除用户需要选择下拉框的错觉
        js5 = "$('.depart').val('市府办')"
        browser.execute_script(js5)

        # 等待用户输入验证码
        verCode = browser.find_element_by_id("verCode").get_attribute('value')
        while (verCode == '' or str(verCode).__len__()!=4):
            verCode = browser.find_element_by_id("verCode").get_attribute('value')
            time.sleep(0.5)

        # 提交登录
        lgButton.click()
        # 返回cookie
        cookies = browser.get_cookies()
        print(cookies)

        href = browser.find_element_by_xpath("//a[@data-name='CATALOG_OBJECT']")
        # href.click()
        # GET请求打开新  的链接并获取cookie
        url = "http://dw.zj.gov.cn/pgpLogin/web/jumpToApp?proxyApp=zjggml"
        browser.get(url)
        cookies = browser.get_cookies()
        print(cookies)
        browser.quit()

        # 获取 JSESSIONID 和 rememberMe
        for cookie in cookies:
            if(str(cookie['name']) == 'JSESSIONID'):
                _JsessionId = str(cookie['value'])
            elif(str(cookie['name']) == 'rememberMe'):
                _RememberMe = str(cookie['value'])
    global_cookie = "JSESSIONID="+_JsessionId+"; rememberMe="+_RememberMe

    return global_cookie

def processCore():
    global count
    for city_index in range(0, input_city.__len__()):
        pages = 1
        cur_page = 1
        response = postQuery("", "", "", 1, getCity(input_city[city_index]))
        cur_page = cur_page + 1

        print("=========================开始处理" + input_city[city_index] + "=========================")

        #解析查询结果
        jsonData = json.loads(response.text)
        if(jsonData=='/'):
            print(name + " 服务器响应异常："+ str(response.status_code))
            res_list_redo.append(line)
            time.sleep(1)
        print(jsonData)
        total = jsonData['total']
        print("总数据量："+str(total))

        rows = []
        rows = jsonData['rows']
        if(rows.__len__() != total and pages==1):
            pages = math.ceil(total/rows.__len__())
        print("总页数：" + str(pages))

        for row in rows:
            companyName = row['companyName']
            name = row['value1']
            dept = row['value3ForShow']
            logoffReason = row['logoffReason']
            logoffCheckReason = row['logoffCheckReason']
            if (logoffReason != '' or logoffCheckReason != ''):
                print("该目录异常，已忽略：" + companyName + " " + dept + " " + name)
                error_list.append(companyName + " " + dept + " " + name)
                continue
            count = count + 1
            content = str(count) + " " + companyName + " " + dept + " " + name
            print(str(count) + " " + companyName + " " + dept + " " + name)
            # out_cities.append(input_city[city_index])
            out_cities.append(companyName)
            out_depts.append(dept)
            out_data.append(name)

        while(cur_page <= pages and cur_page <= loop_limit):
            response = postQuery("", "", "", cur_page, getCity(input_city[city_index]))
            # 解析查询结果
            jsonData = json.loads(response.text)
            cur_page = cur_page + 1
            inner_rows = []
            inner_rows = jsonData['rows']
            for row in inner_rows:
                companyName = row['companyName']
                name = row['value1']
                dept = row['value3ForShow']
                logoffReason = row['logoffReason']
                logoffCheckReason = row['logoffCheckReason']
                if (logoffReason != '' or logoffCheckReason != ''):
                    print("该目录异常，已忽略" + companyName + " " + dept + " " + name)
                    error_list.append(companyName + " " + dept + " " + name)
                    continue
                count = count + 1
                print(str(count) + " " + companyName + " " + dept + " " + name)
                # out_cities.append(input_city[city_index])
                out_cities.append(companyName)
                out_depts.append(dept)
                out_data.append(name)

    # 定义输出表头
    sheet_out_headers = ['省级', '部门', '数据项']
    localTime = time.localtime(time.time())
    currentTime = time.strftime("%Y-%m-%d %H%M%S", localTime)
    wb_out = Workbook()
    # 设置输出
    sheet_out = wb_out.active
    sheet_out.title = '目录数据项'

    for index in range(1, sheet_out_headers.__len__() + 1):
        sheet_out.cell(row=1, column=index, value=sheet_out_headers[index-1])

    # 设置每列的值
    for column_index in range(1, sheet_out_headers.__len__() + 1):
        column_name = sheet_out_headers[column_index - 1]
        dataList = getData(column_name)
        for index in range(1, dataList.__len__() + 1):
            sheet_out.cell(row=index + 1, column=column_index, value=dataList[index - 1])

    # 设置样式：列宽
    for index in range(1, sheet_out_headers.__len__() + 1):
        column_letter = get_column_letter(index)
        sheet_out.column_dimensions[column_letter].width = 12
    sheet_out.column_dimensions['B'].width = 15
    sheet_out.column_dimensions['C'].width = 40

    # 设置样式：对齐、字体等
    header_12_font = Font(name='等线', size=12, italic=False, bold=True)
    body_10_font = Font(name='等线', size=10, italic=False, bold=False)
    for row in sheet_out.rows:
        for index in range(len(row)):
            coordinate = row[index].coordinate
            sheet_out[coordinate].alignment = Alignment(horizontal='center', vertical='center')
            if (row[index].row == 1):
                sheet_out[coordinate].font = header_12_font
            else:
                sheet_out[coordinate].font = body_10_font

    # 保存文件并输出
    wb_out.save('d:/data/out' + currentTime + '.xlsx')
    print("结果已保存："+"d:/data/out" + currentTime + ".xlsx")
    os.startfile('d:/data')  # 打开目录

def getData(column_name):
    ret = []
    if (str(column_name).__contains__('部门')):
        ret = out_depts
    elif (str(column_name).__contains__('省级')):
        ret = out_cities
    elif (str(column_name).__contains__('数据项')):
        ret = out_data
    else:
        raise Exception("Invalid column_name!", column_name)
    return  ret

def getCity(cityName):
    for city in city_list:
        if(str(cityName).__contains__(city['deptName'])):
            return str(city['deptValue'])
    raise Exception("请确认厅局名称是否正确!", cityName)

if __name__ == '__main__':
    # 定义要创建的目录
    mkpath = "D:/data/screenImgTmp"
    mkdir(mkpath)

    processCore()
    print("异常数据项总数：" + str(error_list.__len__()))
    print("异常数据项详情：")
    print(error_list)
    print("程序正常结束...")

